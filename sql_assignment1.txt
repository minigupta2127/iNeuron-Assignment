use database "MG_NEW_DATABASE";
---TASK 1
---creating table
create table shopping_history(
product varchar not null,
quantity integer not null,
unit_price integer not null
);
---inserting the data
insert into shopping_history values('butter',6,50);
insert into shopping_history values('milk',3,70);
insert into shopping_history values('butter',2,50);
insert into shopping_history values('cheese',6,100);
insert into shopping_history values('milk',1,50);
insert into shopping_history values('biscuit',1,70);
insert into shopping_history values('milk',7,30);
insert into shopping_history values('cheese',2,50);
insert into shopping_history values('bread',5,20);
insert into shopping_history values('milk',4,5);
insert into shopping_history values('butter',6,50);

select * from shopping_history;

---to check the total price product wise
select product,sum(quantity*unit_price) as total_price
from shopping_history
group by product
order by product desc;



---Task 2

create table phones(
name varchar2(20) not null unique,
phone_number integer not null unique
);

insert into phones values('Jack',1234);
insert into phones values('Lena',3333);
insert into phones values('Mark',9999);
insert into phones values('Anna',7582);
select * from phones;
create or replace table calls(
id integer not null,
caller integer not null,
callee integer not null,
duration integer not null,
unique(id)
);

insert into calls values(25,1234,7582,8);
insert into calls values(7,9999,7582,1);
insert into calls values(18,9999,3333,4);
insert into calls values(2,7582,3333,3);
insert into calls values(3,3333,1234,1);
insert into calls values(21,3333,1234,1);

with result as
(
select caller as ph_number, sum(duration) as duration from calls group by caller
union all
select callee as ph_number, sum(duration) as duration from calls group by callee
 )
 select name from result
 join
 phones
 on result.ph_number=phones.phone_number
 group by ph_number,name
 having sum(duration)>=10
 order by name;
  
  
--task 3

create table transactions (
amount integer not null,
date date not null);

insert into transactions values(1000,'2020-01-06');
insert into transactions values(-10,'2020-01-14');
insert into transactions values(-75,'2020-01-20');
insert into transactions values(-5,'2020-01-25');
insert into transactions values(-4,'2020-01-29');
insert into transactions values(2000,'2020-03-10');
insert into transactions values(-75,'2020-03-12');
insert into transactions values(-20,'2020-03-15');
insert into transactions values(40,'2020-03-15');
insert into transactions values(-50,'2020-03-17');
insert into transactions values(200,'2020-10-10');
insert into transactions values(-200,'2020-10-10');

select * from transactions;

with cc_fees as 
(
SELECT 
    sum(amount) AS amount_cc,
    count(1) event_cc,
    date_part('month', date) AS month
  FROM transactions
  WHERE amount < 0
  GROUP BY month
  having event_cc>=3 and abs(amount_cc)>=100
  )
  select ((select (sum(amount)) from transactions)-((12-count(*))*5)) as balance from cc_fees;